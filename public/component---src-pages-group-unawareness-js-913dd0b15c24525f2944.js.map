{"version":3,"sources":["webpack:///./src/components/group-unawareness/demo/Demo.js","webpack:///./src/components/group-unawareness/hero/Hero.js","webpack:///./src/components/group-unawareness/definition/Definition.js","webpack:///./src/components/group-unawareness/fairness/Fairness.js","webpack:///./src/components/group-unawareness/redundancy/sandbox/Sandbox.js","webpack:///./src/components/group-unawareness/redundancy/Redundancy.js","webpack:///./src/layouts/footer/Footer.js","webpack:///./src/components/group-unawareness/GroupUnawareness.js","webpack:///./src/pages/group-unawareness.js"],"names":["content","male","female","toLocaleString","maximumFractionDigits","attributes","id","name","columnsToEncode","columnsToRenormalize","Demo","props","state","attributeSelection","reduce","acc","cur","Object","assign","training","trainingLogs","oneHotIndices","sex","done","acceptanceRates","preprocessData","data","a","this","columnsToUse","keys","filter","key","batch","forEachAsync","el","xs","ys","columns","sexIndices","sexEncoded","includes","values","unique","indices","push","tf","shape","arraySync","trim","toLowerCase","length","entries","index","colData","range","max","sub","min","div","reshape","setState","encodedData","newXs","newYs","income","slice","trainModel","input","label","model","add","dense","inputShape","units","activation","useBias","compile","optimizer","adam","loss","metrics","fit","epochs","shuffle","callbacks","onEpochEnd","epoch","logs","percentage","Math","round","random","gsap","to","innerText","duration","overwrite","modifiers","i","strokeDashoffset","then","box","document","querySelector","modelCallback","runModel","opacity","ease","y","onComplete","xs_train","xs_test","ys_train","ys_test","preds","predict","greater","where","gather","equal","sum","maleAcceptance","femaleAcceptance","vizCeilPercentage","ceil","viz","ceilPercentage","numTicks","fromTo","width","toggleAttribute","attribute","keyboardSelectorListener","e","componentDidMount","screenHeight","window","innerHeight","render","className","map","lineHeightRatio","onClick","height","fill","viewBox","preserveAspectRatio","style","stroke","strokeWidth","d","strokeLinecap","strokeLinejoin","strokeDasharray","Array","_","fillRule","Component","illustration","Hero","addEventListener","stagger","scale","rotate","once","src","alt","tableColumns","tableSVGs","Definition","toggleColumn","easE","pointerEvents","ScrollTrigger","create","trigger","start","end","onLeave","onEnterBack","componentWillUnmount","getById","kill","fairnessContent","star","Fairness","animation","scrub","Sandbox","retry","redundancyContent","Redundancy","Footer","datasets","prod","train","test","dev","columnNames","columnConfigs","isLabel","GroupUnawareness","fetchData","url","csv","take","dataURL","process","environment","seo","title","description","Unawareness"],"mappings":"gqCAMA,IAAMA,EACG,2VADHA,EAES,cAFTA,EAQa,SAACC,EAAMC,GAGtB,MAAM,4DAF2B,IAAPD,GAAYE,eAAe,QAAS,CAAEC,sBAAuB,IAApE,KAEnB,6BADqC,IAATF,GAAcC,eAAe,QAAS,CAAEC,sBAAuB,IAAtE,KACrB,0BAXEJ,EAaK,uIAGLK,EAAa,CACjB,CAAEC,GAAI,eAAgBC,KAAM,gBAC5B,CAAED,GAAI,eAAgBC,KAAM,gBAC5B,CAAED,GAAI,MAAOC,KAAM,OACnB,CAAED,GAAI,MAAOC,KAAM,OACnB,CAAED,GAAI,OAAQC,KAAM,QACpB,CAAED,GAAI,YAAaC,KAAM,aACzB,CAAED,GAAI,iBAAkBC,KAAM,kBAC9B,CAAED,GAAI,aAAcC,KAAM,cAC1B,CAAED,GAAI,iBAAkBC,KAAM,0BAG1BC,EAAkB,CACtB,YACA,YACA,iBACA,aACA,eACA,OACA,MACA,kBAEIC,EAAuB,CAC3B,SACA,MACA,gBACA,eACA,eACA,kBAkaaC,E,YA9Zb,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CACXC,mBAAoBR,EAAWS,QAAO,SAACC,EAAKC,GAAN,aAAcC,OAAOC,OAAOH,IAAd,MAAsBC,EAAIV,KAAK,EAA/B,MAAwC,IAC5Fa,UAAU,EACVC,aAAc,KACdC,cAAe,GACfC,IAAK,GACLC,MAAM,EACNC,gBAAiB,CACfF,IAAK,CACHrB,KAAM,EACNC,OAAQ,KAZG,E,4CAkBbuB,e,uCAAN,WAAqBC,GAArB,4BAAAC,EAAA,6DACUd,EAAuBe,KAAKhB,MAA5BC,mBACFgB,EAAeZ,OAAOa,KAAKjB,GAAoBkB,QAAO,SAAAC,GAAG,OAAInB,EAAmBmB,MAFxF,SAKQN,EACHO,MAAM,KAAM,GACZC,cAAa,SAAAC,GAAO,IACXC,EAAWD,EAAXC,GAAIC,EAAOF,EAAPE,GACNC,EAAU,GACVjB,EAAgB,GAEhBkB,EAAa,GACfC,EAAa,KAEjB,IAAK,IAAMR,KAAOI,EAChB,GAAIP,EAAaY,SAAST,IAAQxB,EAAgBiC,SAAST,GAAM,CAC/D,IAAMU,EAASN,EAAGJ,GAAKW,SAASD,OAC1BE,EAAUR,EAAGJ,GAAKW,SAASC,QACjCN,EAAQO,KAAKC,IAAUF,EAASF,EAAOK,MAAM,KAC7C,cAAoBL,EAAOM,eAA3B,aAAwC,CACtC3B,EAAiBW,EAAJ,IADyB,QACRiB,OAAOC,eAAmBjC,OAAOa,KAAKT,GAAe8B,OAErF,GAAY,QAARnB,EAAe,CACjBQ,EAAaM,IAAUF,EAASF,EAAOK,MAAM,IAC7C,cAA6BL,EAAOM,YAAYI,aAAhD,aAA2D,CAAC,IAAD,UAA/CC,EAA+C,KACzDd,EADyD,KACxCU,OAAOC,eAAiBG,SAGxC,GAAY,QAARrB,EAAe,CACxB,IAAMU,EAASN,EAAGJ,GAAKW,SAASD,OAC1BE,EAAUR,EAAGJ,GAAKW,SAASC,QACjCJ,EAAaM,IAAUF,EAASF,EAAOK,MAAM,IAC7C,cAA6BL,EAAOM,YAAYI,aAAhD,aAA2D,CAAC,IAAD,UAA/CC,EAA+C,KACzDd,EADyD,KACxCU,OAAOC,eAAiBG,QAEtC,GAAIxB,EAAaY,SAAST,IAAQvB,EAAqBgC,SAAST,GAAM,CAC3E,IAAMsB,EAAUlB,EAAGJ,GACbuB,EAAQD,EAAQE,MAAMC,IAAIH,EAAQI,OACxCpB,EAAQO,KAAKT,EAAGJ,GAAKyB,IAAIH,EAAQI,OAAOC,IAAIJ,GAAOK,QAAQ,EAAE,EAAG,KAChEvC,EAAcW,GAAOf,OAAOa,KAAKT,GAAe8B,OAGpD,EAAKU,SAAS,CACZxC,gBACAC,IAAK,CACHwC,YAAatB,EACbI,QAASL,KAGbwB,EAAQjB,IAAUR,EAAS,GAC3B0B,EAAQlB,IAAUT,EAAG4B,OAAOtB,SAASC,QAAS,GAAGsB,MAAM,CAAC,EAAG,GAAI,EAAE,EAAG,OAnD1E,gCAqDS,CAAE9B,GAAI2B,EAAO1B,GAAI2B,IArD1B,gD,wDAwDAG,WAAA,SAAWC,EAAOC,GAAQ,IAAD,OACjBC,EAAQxB,MAwDd,OAvDAwB,EAAMC,IAAIzB,IAAU0B,MAAM,CACxBC,WAAY,CAACL,EAAMrB,MAAM,IACzB2B,MAAO,EACPC,WAAY,OACZC,SAAS,KAEXN,EAAMC,IAAIzB,IAAU0B,MAAM,CACxBE,MAAO,EACPC,WAAY,UACZC,SAAS,KAEXN,EAAMO,QAAQ,CACZC,UAAWhC,IAASiC,KAAK,IACzBC,KAAM,qBACNC,QAAS,CAAC,cAGZX,EAAMY,IACJd,EACAC,EACA,CACEc,OAAQ,GACRC,SAAS,EACTC,UAAW,CACTC,WAAY,SAACC,EAAOC,GAClB,EAAK3B,SAAS,CACZzC,aAAc,CACZmE,QACAC,UAGJ,IAAMC,EAAqB,GAARF,EAAaG,KAAKC,MAAsB,EAAhBD,KAAKE,UAChDC,IAAKC,GAAG,uBAAwB,CAC9BC,UAAWN,EACXO,SAAU,GACVC,WAAW,EACXC,UAAW,CACTH,UAAW,SAAAI,GAAC,OAAIT,KAAKC,MAAMQ,OAG/BN,IAAKC,GAAG,qBAAsB,CAC5BM,iBAAkB,IAAMX,EACxBO,SAAU,GACVC,WAAW,QAKnBI,KA/BF,sBA+BO,4BAAA1E,EAAA,uDACC2E,EAAMC,SAASC,cAAc,sBAEjCF,EAAIP,UAAY,SAElB,EAAKU,cAAcnC,GALd,4CAOAA,G,EAGToC,SAAA,WAAY,IAAD,OACT9E,KAAKiC,SAAS,CACZ1C,UAAU,IACT,WAUY,IAAD,EATZ0E,IAAKC,GAAG,uBAAwB,CAC9Ba,QAAS,EACTX,SAAU,GACVY,KAAM,aAERf,IAAKC,GAAG,uBAAwB,CAC9Be,EAAG,SACHb,SAAU,IACVY,KAAM,aACNE,YAAU,wBAAE,0CAAAnF,EAAA,6DACFD,EAAS,EAAKf,MAAde,KADE,SAEe,EAAKD,eAAeC,GAFnC,gBAEFU,EAFE,EAEFA,GAAIC,EAFF,EAEEA,GACN0E,EAAW3E,EAAG8B,MAAM,EAAG,KACvB8C,EAAU5E,EAAG8B,MAAM,KAAM,GACzB+C,EAAW5E,EAAG6B,MAAM,EAAG,KACvBgD,EAAU7E,EAAG6B,MAAM,KAAM,GAC/B,EAAKL,SAAS,CACZnC,KAAM,CACJsF,UACAE,aAED,kBAAM,EAAK/C,WAAW4C,EAAUE,MAZzB,4CAAF,8CAeZpB,IAAKC,GAAG,0BAA2B,CACjCa,QAAS,EACTX,SAAU,GACVY,KAAM,gB,EAKNH,c,uCAAN,WAAoBnC,GAApB,yBAAA3C,EAAA,6DACUqF,EAAYpF,KAAKhB,MAAMc,KAAvBsF,QACA1F,EAAQM,KAAKhB,MAAbU,IACF6F,EAAQ7C,EAAM8C,QAAQJ,GAH9B,SAK+BG,EAAME,QAAQ,IAAKC,MAAMhG,EAAIwC,YAAYyD,OAAOjG,EAAIsB,QAAJ,KAAqB,GAAGsB,MAAM,KAAM,GAAGsD,MAAM,GAAI1E,IAAS,CAAC,IAAK,KAAK2E,MAAM9D,IAAI,KAAKjC,OALnK,cAKQgG,EALR,gBAMiCP,EAAME,QAAQ,IAAKC,MAAMhG,EAAIwC,YAAYyD,OAAOjG,EAAIsB,QAAJ,OAAuB,GAAGsB,MAAM,KAAM,GAAGsD,MAAM,GAAI1E,IAAS,CAAC,IAAK,KAAK2E,MAAM9D,IAAI,KAAKjC,OANvK,OAMQiG,EANR,OAQQC,EAAiF,GAA7DlC,KAAKmC,KAAkD,GAA7CnC,KAAKlC,IAAIkE,EAAgBC,IAE7D/F,KAAKiC,SAAS,CACZ1C,UAAU,EACVI,MAAM,EACNC,gBAAiB,CACfF,IAAK,CACHrB,KAAMyH,EACNxH,OAAQyH,GAEVG,IAAK,CACHC,eAAgBH,EAChBI,SAAUJ,EAAoB,EAAI,MAGrC,WACD/B,IAAKoC,OAAO,mBACV,CAAEtB,QAAS,GACX,CAAEA,QAAS,EAAGC,KAAM,WAAYZ,SAAU,KAC5CH,IAAKoC,OAAO,0BACV,CAAEC,MAAO,GACT,CAAEA,MAA2B,IAAjBR,EAAuBE,EAAoB,IAAhD,IAAwDhB,KAAM,WAAYZ,SAAU,KAC7FH,IAAKoC,OAAO,4BACV,CAAEC,MAAO,GACT,CAAEA,MAA6B,IAAnBP,EAAyBC,EAAoB,IAAlD,IAA0DhB,KAAM,WAAYZ,SAAU,QAhCnG,iD,wDAoCAmC,gBAAA,SAAgBC,GAAY,IAAD,EACjBvH,EAAuBe,KAAKhB,MAA5BC,mBACRe,KAAKiC,SAAS,CACZhD,mBAAmB,OAAD,UACbA,GADa,OAEfuH,IAAavH,EAAmBuH,GAFjB,O,EAOtBC,yBAAA,SAAyBC,GACT,UAAVA,EAAEtG,KACJJ,KAAK8E,Y,EAIT6B,kBAAA,WACE3G,KAAKiC,SAAS,CACZ2E,aAAcC,OAAOC,e,EAIzBC,OAAA,WAAU,IAAD,SAQH/G,KAAKhB,MANPC,EAFK,EAELA,mBACAM,EAHK,EAGLA,SACAC,EAJK,EAILA,aAEAG,GANK,EAKLiH,aALK,EAMLjH,MACAC,EAPK,EAOLA,gBAEF,OACI,yBAAKoH,UAAU,iCAAiCtI,GAAG,OACjD,yBAAKsI,UAAU,gBACb,yBAAKA,UAAU,kBACZvI,EAAWwI,KAAI,SAACT,EAAW/E,GAC1B,IAAMyF,EAAkB,EAAY,GAARzF,EAAa,IACzC,OAAIyF,EAEA,4BACEF,UAAS,sBAAuB/H,EAAmBuH,EAAU9H,IAAM,UAAY,IAC/E0B,IAAKoG,EAAU9H,GACfyI,QAAS,kBAAM,EAAKZ,gBAAgBC,EAAU9H,MAE9C,uBAAGsI,UAAU,sBAAsBR,EAAU7H,MAC7C,yBAAKqI,UAAU,mCACb,yBACEV,MAAM,MACNc,OAAO,MACPC,KAAK,OACLC,QAAQ,cACRN,UAAU,sBACVO,oBAAoB,WACpBC,MAAO,CAAE,UAAW/F,IAEpB,0BACEgG,OAAO,UACPC,YAAY,MACZC,EAAC,mBAAqB,KAAOT,EAA5B,SAAoD,MAAQA,EAA5D,QAAmF,MAAQA,EAA3F,SAAmH,MAAQA,EAA3H,MAAgJ,IAAMA,KAG3J,yBAAKF,UAAU,4BACf,yBACEV,MAAM,KACNc,OAAO,KACPC,KAAK,OACLC,QAAQ,YACRN,UAAU,uBAEV,0BACEA,UAAU,wBACVY,cAAc,QACdC,eAAe,QACfH,YAAY,IACZC,EAAE,6BAOP,QAET,yBAAKX,UAAU,gBACb,yBAAKA,UAAU,uBACb,uBAAGA,UAAU,kBAAkBzH,IAAaC,EAAe,YAAc,gBAI/E,yBAAKwH,UAAU,oBACb,yBAAKA,UAAU,kCACb,uBAAGA,UAAU,mBACV5I,GAEH,4BACE4I,UAAU,mBACVG,QAAS,kBAAM,EAAKrC,aAEnB1G,IAGL,yBAAK4I,UAAU,qCACZzH,IAAaC,GAAgB,uBAAGwH,UAAU,YAAb,aAC7BzH,GAAYC,GAAgBA,EAAaoE,MACxC,yBAAKoD,UAAU,0BACb,uBAAGA,UAAU,sBAAb,eAGA,yBAAKA,UAAU,qBACb,yBACEV,MAAM,MACNc,OAAO,IACPE,QAAQ,YACRN,UAAU,yBAEV,0BACEA,UAAU,mBACVU,YAAY,IACZE,cAAc,QACdD,EAAE,cAEJ,0BACEjJ,GAAG,oBACH+I,OAAO,UACPC,YAAY,IACZE,cAAc,QACdE,gBAAgB,UAChBtD,iBAAiB,MACjBmD,EAAE,eAGN,uBAAGX,UAAU,8BACX,0BAAMA,UAAU,uBAAuB,GACvC,0BAAMA,UAAU,2BAAhB,SAMTrH,GACC,yBAAKqH,UAAU,mCACb,uBAAGA,UAAU,wBAAb,oCACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,6CACZ,YAAIe,MAAMnI,EAAgBsG,IAAIE,WAAWa,KAAI,SAACe,EAAGvG,GAChD,OACE,yBAAKuF,UAAU,sBAAsB5G,IAAKqB,GACvCA,EAAQ,GAAM,GAAK,uBAAGuF,UAAU,6BAAwC,EAARvF,EAA7C,UAK5B,yBAAKuF,UAAU,+BACb,uBAAGA,UAAU,4BAAb,QACA,yBAAKA,UAAU,0BACb,uBAAGA,UAAU,uCAA0ClD,KAAKC,MAAiC,IAA3BnE,EAAgBF,IAAIrB,MAAtF,OAGJ,yBAAK2I,UAAU,iCACb,uBAAGA,UAAU,4BAAb,UACA,yBAAKA,UAAU,4BACb,uBAAGA,UAAU,uCAA0ClD,KAAKC,MAAmC,IAA7BnE,EAAgBF,IAAIpB,QAAtF,QAIN,6BACA,yBAAK0I,UAAU,uBACf,uBAAGA,UAAU,sBACV5I,EAAwBwB,EAAgBF,IAAIrB,KAAMuB,EAAgBF,IAAIpB,SAEzE,uBAAG0I,UAAU,sBACV5I,KAKRuB,GACC,yBAAKqH,UAAU,kBACb,yBACEV,MAAM,KACNc,OAAO,KACPE,QAAQ,YACRN,UAAU,aAEV,uBACEK,KAAK,OACLY,SAAS,UACTR,OAAO,OACPG,cAAc,QACdF,YAAY,KAEZ,uBAAGV,UAAU,iBAAiBU,YAAY,KACxC,0BAAMC,EAAE,wBACR,0BACEE,eAAe,QACfF,EAAE,sE,GAlZPO,aChDbC,G,UACC,8CADDA,EAEC,yBAqCQC,E,0GAjCbzB,kBAAA,WACEhC,SAAS0D,iBAAiB,gBAAgB,WACxCpE,IAAKoC,OAAO,sBACV,CAAEpB,EAAG,OACL,CAAEA,EAAG,EAAGD,KAAM,WAAYZ,SAAU,IAAKkE,QAAS,MACpDrE,IAAKoC,OAAO,6BACV,CAAEkC,MAAO,GAAKxD,QAAS,EAAGyD,QAAS,IACnC,CAAED,MAAO,EAAGxD,QAAS,EAAGyD,OAAQ,GAAIxD,KAAM,WAAYZ,SAAU,QACjE,CAAEqE,MAAM,K,EAGb1B,OAAA,WACE,OACE,yBAAKC,UAAU,iCACb,yBACEA,UAAU,4BACV0B,IAAKP,EACLQ,IAAKR,IAEP,wBAAInB,UAAU,iBACZ,0BAAMA,UAAU,2BACd,0BAAMA,UAAU,sBAAhB,UAEF,6BACA,0BAAMA,UAAU,2BACd,0BAAMA,UAAU,sBAAhB,mB,GA1BOkB,a,wBCHbU,EAAe,CAAE,UAAW,UAAW,MAAO,MAAO,OAAQ,OAAQ,UAAW,QAChFC,EAKE,CACJH,IAAK,2CACLC,IAAK,sBAqFMG,E,0GAhFbC,aAAA,SAAatH,EAAOyC,GAClBD,IAAKC,GAAG,CAAC,eAAezC,EAAhB,4BAAkDA,EAAlD,kBACN,CAAEsD,QAASb,EAAK,EAAI,EAAG8E,KAAM,WAAY5E,SAAU,KACrDO,SAASC,cAAT,eAAsCnD,GAAS+F,MAAMyB,cAAgB/E,EAAK,UAAY,Q,EAGxFyC,kBAAA,WAAqB,IAAD,OAClBuC,IAAcC,OAAO,CACnBzK,GAAI,yBACJ0K,QAAS,aACTC,MAAO,aACPC,IAAK,UACLC,QAAS,kBAAM,EAAKR,aAAa,GAAG,IACpCS,YAAa,kBAAM,EAAKT,aAAa,GAAG,MAE1CG,IAAcC,OAAO,CACnBzK,GAAI,yBACJ0K,QAAS,aACTC,MAAO,UACPC,IAAK,UACLC,QAAS,kBAAM,EAAKR,aAAa,GAAG,IACpCS,YAAa,kBAAM,EAAKT,aAAa,GAAG,MAE1CG,IAAcC,OAAO,CACnBzK,GAAI,yBACJ0K,QAAS,aACTC,MAAO,UACPC,IAAK,UACLC,QAAS,kBAAM,EAAKR,aAAa,GAAG,IACpCS,YAAa,kBAAM,EAAKT,aAAa,GAAG,O,EAI5CU,qBAAA,WACEP,IAAcQ,QAAQ,0BAA0BC,OAChDT,IAAcQ,QAAQ,0BAA0BC,OAChDT,IAAcQ,QAAQ,0BAA0BC,Q,EAGlD5C,OAAA,WAAU,IAAD,OACP,OACE,yBAAKC,UAAU,+CACb,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,UACb,uBAAGA,UAAU,SA1DJ,iHA2DT,yBAAKA,UAAU,kBACZ,YAAIe,MAAM,IAAId,KAAI,SAACe,EAAGvG,GACrB,OACE,yBACE/C,GAAE,cAAgB+C,EAClBuF,UAAU,aACVG,QAAS,kBAAM,EAAK4B,aAAatH,IACjCrB,IAAKqB,GAEL,yBAAKuF,UAAU,6BACb,uBAAGA,UAAU,gDAAgD4B,EAAanH,KAE5E,yBAAKuF,UAAU,iBACZ,YAAIe,MAAM,IAAId,KAAI,SAACe,EAAGvG,GACrB,OACE,yBACErB,IAAKqB,EACLuF,UAAU,eACV0B,IAAKG,EAAeH,IACpBC,IAAKE,EAAeF,UAK5B,yBAAK3B,UAAU,yC,GAtERkB,aCZnB0B,G,UAAkB,CACtB,ykBACA,4ZAEIC,EACC,qCADDA,EAEC,gBAyCQC,E,0GArCbnD,kBAAA,WACEuC,IAAcC,OAAO,CACnBzK,GAAI,uBACJ0K,QAAS,4BACTC,MAAO,aACPC,IAAK,aACLS,UAAW9F,IAAKC,GAAG,YAAa,CAAEsE,OAAQ,IAAKpE,SAAU,IACzD4F,MAAO,M,EAIXP,qBAAA,WACEP,IAAcQ,QAAQ,wBAAwBC,Q,EAGhD5C,OAAA,WACE,OACE,yBAAKC,UAAU,6CACb,yBAAKA,UAAU,SACb,uBAAGA,UAAU,SA9BD,wDA+BZ,yBAAKA,UAAU,sBACb,uBAAGA,UAAU,YAAY4C,EAAgB,IACzC,uBAAG5C,UAAU,YAAY4C,EAAgB,MAG7C,yBAAK5C,UAAU,6BACb,yBACEA,UAAU,WACV0B,IAAKmB,EACLlB,IAAKkB,O,GA9BM3B,a,s1BCVvB,IAAM9J,EACS,cADTA,EAOa,SAACC,EAAMC,GAGtB,MAAM,4DAF2B,IAAPD,GAAYE,eAAe,QAAS,CAAEC,sBAAuB,IAApE,KAEnB,6BADqC,IAATF,GAAcC,eAAe,QAAS,CAAEC,sBAAuB,IAAtE,KACrB,0BAIEC,EAAa,CACjB,CAAEC,GAAI,eAAgBC,KAAM,gBAC5B,CAAED,GAAI,eAAgBC,KAAM,gBAC5B,CAAED,GAAI,MAAOC,KAAM,OACnB,CAAED,GAAI,MAAOC,KAAM,OACnB,CAAED,GAAI,OAAQC,KAAM,QACpB,CAAED,GAAI,YAAaC,KAAM,aACzB,CAAED,GAAI,iBAAkBC,KAAM,kBAC9B,CAAED,GAAI,aAAcC,KAAM,cAC1B,CAAED,GAAI,iBAAkBC,KAAM,0BAG1BC,EAAkB,CACtB,YACA,YACA,iBACA,aACA,eACA,OACA,MACA,kBAEIC,EAAuB,CAC3B,SACA,MACA,gBACA,eACA,eACA,kBAwaaoL,E,YApab,WAAYlL,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CACXC,mBAAoBR,EAAWS,QAAO,SAACC,EAAKC,GAAN,aAAcC,OAAOC,OAAOH,IAAd,MAAsBC,EAAIV,KAAK,EAA/B,MAAwC,IAC5Fa,UAAU,EACVC,aAAc,KACdC,cAAe,GACfC,IAAK,GACLC,MAAM,EACNC,gBAAiB,CACfF,IAAK,CACHrB,KAAM,EACNC,OAAQ,KAZG,E,4CAkBbuB,e,uCAAN,WAAqBC,GAArB,4BAAAC,EAAA,6DACUd,EAAuBe,KAAKhB,MAA5BC,mBACFgB,EAAeZ,OAAOa,KAAKjB,GAAoBkB,QAAO,SAAAC,GAAG,OAAInB,EAAmBmB,MAFxF,SAKQN,EACHO,MAAM,KAAM,GACZC,cAAa,SAAAC,GAAO,IACXC,EAAWD,EAAXC,GAAIC,EAAOF,EAAPE,GACNC,EAAU,GACVjB,EAAgB,GAEhBkB,EAAa,GACfC,EAAa,KAEjB,IAAK,IAAMR,KAAOI,EAChB,GAAIP,EAAaY,SAAST,IAAQxB,EAAgBiC,SAAST,GAAM,CAC/D,IAAMU,EAASN,EAAGJ,GAAKW,SAASD,OAC1BE,EAAUR,EAAGJ,GAAKW,SAASC,QACjCN,EAAQO,KAAKC,IAAUF,EAASF,EAAOK,MAAM,KAC7C,cAAoBL,EAAOM,eAA3B,aAAwC,CACtC3B,EAAiBW,EAAJ,IADyB,QACRiB,OAAOC,eAAmBjC,OAAOa,KAAKT,GAAe8B,OAErF,GAAY,QAARnB,EAAe,CACjBQ,EAAaM,IAAUF,EAASF,EAAOK,MAAM,IAC7C,cAA6BL,EAAOM,YAAYI,aAAhD,aAA2D,CAAC,IAAD,UAA/CC,EAA+C,KACzDd,EADyD,KACxCU,OAAOC,eAAiBG,SAGxC,GAAY,QAARrB,EAAe,CACxB,IAAMU,EAASN,EAAGJ,GAAKW,SAASD,OAC1BE,EAAUR,EAAGJ,GAAKW,SAASC,QACjCJ,EAAaM,IAAUF,EAASF,EAAOK,MAAM,IAC7C,cAA6BL,EAAOM,YAAYI,aAAhD,aAA2D,CAAC,IAAD,UAA/CC,EAA+C,KACzDd,EADyD,KACxCU,OAAOC,eAAiBG,QAEtC,GAAIxB,EAAaY,SAAST,IAAQvB,EAAqBgC,SAAST,GAAM,CAC3E,IAAMsB,EAAUlB,EAAGJ,GACbuB,EAAQD,EAAQE,MAAMC,IAAIH,EAAQI,OACxCpB,EAAQO,KAAKT,EAAGJ,GAAKyB,IAAIH,EAAQI,OAAOC,IAAIJ,GAAOK,QAAQ,EAAE,EAAG,KAChEvC,EAAcW,GAAOf,OAAOa,KAAKT,GAAe8B,OAGpD,EAAKU,SAAS,CACZxC,gBACAC,IAAK,CACHwC,YAAatB,EACbI,QAASL,KAGbwB,EAAQjB,IAAUR,EAAS,GAC3B0B,EAAQlB,IAAUT,EAAG4B,OAAOtB,SAASC,QAAS,GAAGsB,MAAM,CAAC,EAAG,GAAI,EAAE,EAAG,OAnD1E,gCAqDS,CAAE9B,GAAI2B,EAAO1B,GAAI2B,IArD1B,gD,wDAwDAG,WAAA,SAAWC,EAAOC,GAAQ,IAAD,OACjBC,EAAQxB,MAwDd,OAvDAwB,EAAMC,IAAIzB,IAAU0B,MAAM,CACxBC,WAAY,CAACL,EAAMrB,MAAM,IACzB2B,MAAO,EACPC,WAAY,OACZC,SAAS,KAEXN,EAAMC,IAAIzB,IAAU0B,MAAM,CACxBE,MAAO,EACPC,WAAY,UACZC,SAAS,KAEXN,EAAMO,QAAQ,CACZC,UAAWhC,IAASiC,KAAK,IACzBC,KAAM,qBACNC,QAAS,CAAC,cAGZX,EAAMY,IACJd,EACAC,EACA,CACEc,OAAQ,GACRC,SAAS,EACTC,UAAW,CACTC,WAAY,SAACC,EAAOC,GAClB,EAAK3B,SAAS,CACZzC,aAAc,CACZmE,QACAC,UAGJ,IAAMC,EAAqB,GAARF,EAAaG,KAAKC,MAAsB,EAAhBD,KAAKE,UAChDC,IAAKC,GAAG,uBAAwB,CAC9BC,UAAWN,EACXO,SAAU,GACVC,WAAW,EACXC,UAAW,CACTH,UAAW,SAAAI,GAAC,OAAIT,KAAKC,MAAMQ,OAG/BN,IAAKC,GAAG,qBAAsB,CAC5BM,iBAAkB,IAAMX,EACxBO,SAAU,GACVC,WAAW,QAKnBI,KA/BF,sBA+BO,4BAAA1E,EAAA,uDACC2E,EAAMC,SAASC,cAAc,sBAEjCF,EAAIP,UAAY,SAElB,EAAKU,cAAcnC,GALd,4CAOAA,G,EAGToC,SAAA,WAAY,IAAD,OACT9E,KAAKiC,SAAS,CACZ1C,UAAU,IACT,WAUY,IAAD,EATZ0E,IAAKC,GAAG,+BAAgC,CACtCa,QAAS,EACTX,SAAU,GACVY,KAAM,aAERf,IAAKC,GAAG,+BAAgC,CACtCe,EAAG,WACHb,SAAU,IACVY,KAAM,aACNE,YAAU,wBAAE,0CAAAnF,EAAA,6DACFD,EAAS,EAAKf,MAAde,KADE,SAEe,EAAKD,eAAeC,GAFnC,gBAEFU,EAFE,EAEFA,GAAIC,EAFF,EAEEA,GACN0E,EAAW3E,EAAG8B,MAAM,EAAG,KACvB8C,EAAU5E,EAAG8B,MAAM,KAAM,GACzB+C,EAAW5E,EAAG6B,MAAM,EAAG,KACvBgD,EAAU7E,EAAG6B,MAAM,KAAM,GAC/B,EAAKL,SAAS,CACZnC,KAAM,CACJsF,UACAE,aAED,kBAAM,EAAK/C,WAAW4C,EAAUE,MAZzB,4CAAF,8CAeZpB,IAAKC,GAAG,kCAAmC,CACzCa,QAAS,EACTX,SAAU,GACVY,KAAM,gB,EAKNH,c,uCAAN,WAAoBnC,GAApB,yBAAA3C,EAAA,6DACUqF,EAAYpF,KAAKhB,MAAMc,KAAvBsF,QACA1F,EAAQM,KAAKhB,MAAbU,IACF6F,EAAQ7C,EAAM8C,QAAQJ,GAH9B,SAK+BG,EAAME,QAAQ,IAAKC,MAAMhG,EAAIwC,YAAYyD,OAAOjG,EAAIsB,QAAJ,KAAqB,GAAGsB,MAAM,KAAM,GAAGsD,MAAM,GAAI1E,IAAS,CAAC,IAAK,KAAK2E,MAAM9D,IAAI,KAAKjC,OALnK,cAKQgG,EALR,gBAMiCP,EAAME,QAAQ,IAAKC,MAAMhG,EAAIwC,YAAYyD,OAAOjG,EAAIsB,QAAJ,OAAuB,GAAGsB,MAAM,KAAM,GAAGsD,MAAM,GAAI1E,IAAS,CAAC,IAAK,KAAK2E,MAAM9D,IAAI,KAAKjC,OANvK,OAMQiG,EANR,OAQQC,EAAiF,GAA7DlC,KAAKmC,KAAkD,GAA7CnC,KAAKlC,IAAIkE,EAAgBC,IAE7D/F,KAAKiC,SAAS,CACZ1C,UAAU,EACVI,MAAM,EACNC,gBAAiB,CACfF,IAAK,CACHrB,KAAMyH,EACNxH,OAAQyH,GAEVG,IAAK,CACHC,eAAgBH,EAChBI,SAAUJ,EAAoB,EAAI,MAGrC,WACD/B,IAAKoC,OAAO,mBACV,CAAEtB,QAAS,GACX,CAAEA,QAAS,EAAGC,KAAM,WAAYZ,SAAU,KAC5CH,IAAKoC,OAAO,0BACV,CAAEC,MAAO,GACT,CAAEA,MAA2B,IAAjBR,EAAuBE,EAAoB,IAAhD,IAAwDhB,KAAM,WAAYZ,SAAU,KAC7FH,IAAKoC,OAAO,4BACV,CAAEC,MAAO,GACT,CAAEA,MAA6B,IAAnBP,EAAyBC,EAAoB,IAAlD,IAA0DhB,KAAM,WAAYZ,SAAU,QAhCnG,iD,wDAoCAmC,gBAAA,SAAgBC,GAAY,IAAD,EACjBvH,EAAuBe,KAAKhB,MAA5BC,mBACRe,KAAKiC,SAAS,CACZhD,mBAAmB,OAAD,UACbA,GADa,OAEfuH,IAAavH,EAAmBuH,GAFjB,O,EAOtBC,yBAAA,SAAyBC,GACT,UAAVA,EAAEtG,KACJJ,KAAK8E,Y,EAIToF,MAAA,WACElK,KAAKiC,SAAS,CACZ1C,UAAU,EACVC,aAAc,KACdC,cAAe,GACfC,IAAK,GACLC,MAAM,EACNC,gBAAiB,CACfF,IAAK,CACHrB,KAAM,EACNC,OAAQ,MAGX,WACD2F,IAAKC,GAAG,+BAAgC,CACtCa,QAAS,EACTX,SAAU,IACVY,KAAM,eAERf,IAAKC,GAAG,+BAAgC,CACtCe,EAAG,WACHb,SAAU,IACVY,KAAM,eAERf,IAAKC,GAAG,kCAAmC,CACzCa,QAAS,EACTX,SAAU,GACVY,KAAM,iB,EAKZ2B,kBAAA,WACE3G,KAAKiC,SAAS,CACZ2E,aAAcC,OAAOC,e,EAIzBC,OAAA,WAAU,IAAD,SAQH/G,KAAKhB,MANPC,EAFK,EAELA,mBACAM,EAHK,EAGLA,SACAC,EAJK,EAILA,aAEAG,GANK,EAKLiH,aALK,EAMLjH,MACAC,EAPK,EAOLA,gBAEF,OACI,yBAAKoH,UAAU,iCAAiCtI,GAAG,eACjD,yBAAKsI,UAAU,gBACb,yBAAKA,UAAU,kBACZvI,EAAWwI,KAAI,SAACT,EAAW/E,GAC1B,IAAMyF,EAAkB,EAAY,GAARzF,EAAa,IACzC,OAAIyF,EAEA,4BACEF,UAAS,sBAAuB/H,EAAmBuH,EAAU9H,IAAM,UAAY,IAC/E0B,IAAKoG,EAAU9H,GACfyI,QAAS,kBAAM,EAAKZ,gBAAgBC,EAAU9H,MAE9C,uBAAGsI,UAAU,sBAAsBR,EAAU7H,MAC7C,yBAAKqI,UAAU,mCACb,yBACEV,MAAM,MACNc,OAAO,MACPC,KAAK,OACLC,QAAQ,cACRN,UAAU,sBACVO,oBAAoB,WACpBC,MAAO,CAAE,UAAW/F,IAEpB,0BACEgG,OAAO,UACPC,YAAY,MACZC,EAAC,mBAAqB,KAAOT,EAA5B,SAAoD,MAAQA,EAA5D,QAAmF,MAAQA,EAA3F,SAAmH,MAAQA,EAA3H,MAAgJ,IAAMA,KAG3J,yBAAKF,UAAU,4BACf,yBACEV,MAAM,KACNc,OAAO,KACPC,KAAK,OACLC,QAAQ,YACRN,UAAU,uBAEV,0BACEA,UAAU,wBACVY,cAAc,QACdC,eAAe,QACfH,YAAY,IACZC,EAAE,6BAOP,QAET,yBAAKX,UAAU,gBACb,yBAAKA,UAAU,uBACb,uBAAGA,UAAU,kBAAkBzH,IAAaC,EAAe,YAAc,gBAI/E,yBAAKwH,UAAU,oBACb,yBAAKA,UAAU,kCACb,4BACEA,UAAU,mBACVG,QAAS,kBAAM,EAAKrC,aAEnB1G,IAGL,yBAAK4I,UAAU,qCACZzH,IAAaC,GAAgB,uBAAGwH,UAAU,YAAb,aAC7BzH,GAAYC,GAAgBA,EAAaoE,MACxC,yBAAKoD,UAAU,0BACb,uBAAGA,UAAU,sBAAb,eAGA,yBAAKA,UAAU,qBACb,yBACEV,MAAM,MACNc,OAAO,IACPE,QAAQ,YACRN,UAAU,yBAEV,0BACEA,UAAU,mBACVU,YAAY,IACZE,cAAc,QACdD,EAAE,cAEJ,0BACEjJ,GAAG,oBACH+I,OAAO,UACPC,YAAY,IACZE,cAAc,QACdE,gBAAgB,UAChBtD,iBAAiB,MACjBmD,EAAE,eAGN,uBAAGX,UAAU,8BACX,0BAAMA,UAAU,uBAAuB,GACvC,0BAAMA,UAAU,2BAAhB,SAMTrH,GACC,yBAAKqH,UAAU,mCACb,uBAAGA,UAAU,wBAAb,oCACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,6CACZ,YAAIe,MAAMnI,EAAgBsG,IAAIE,WAAWa,KAAI,SAACe,EAAGvG,GAChD,OACE,yBAAKuF,UAAU,sBAAsB5G,IAAKqB,GACvCA,EAAQ,GAAM,GAAK,uBAAGuF,UAAU,6BAAwC,EAARvF,EAA7C,UAK5B,yBAAKuF,UAAU,+BACb,uBAAGA,UAAU,4BAAb,QACA,yBAAKA,UAAU,0BACb,uBAAGA,UAAU,uCAA0ClD,KAAKC,MAAiC,IAA3BnE,EAAgBF,IAAIrB,MAAtF,OAGJ,yBAAK2I,UAAU,iCACb,uBAAGA,UAAU,4BAAb,UACA,yBAAKA,UAAU,4BACb,uBAAGA,UAAU,uCAA0ClD,KAAKC,MAAmC,IAA7BnE,EAAgBF,IAAIpB,QAAtF,QAIN,6BACA,yBAAK0I,UAAU,uBACf,uBAAGA,UAAU,sBACV5I,EAAwBwB,EAAgBF,IAAIrB,KAAMuB,EAAgBF,IAAIpB,SAEzE,4BACE0I,UAAU,mBACVG,QAAS,kBAAM,EAAK+C,UAFtB,kB,GAtZIhC,aC7ChBiC,EAAoB,CACxB,ihBACA,2VACA,urBAgCaC,E,kGAxBbrD,OAAA,WAAU,IACAjH,EAASE,KAAKjB,MAAde,KAER,OACE,yBAAKkH,UAAU,6CACb,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,SACb,uBAAGA,UAAU,SAnBC,mDAoBd,yBAAKA,UAAU,2BACb,uBAAGA,UAAU,YAAYmD,EAAkB,KAE7C,6BACA,kBAAC,EAAD,CAASrK,KAAMA,IACf,6BACA,yBAAKkH,UAAU,sBACb,uBAAGA,UAAU,YAAYmD,EAAkB,MAG/C,yBAAKnD,UAAU,oB,GAnBEkB,aCFVmC,G,4GAVbtD,OAAA,WACE,OACE,4BAAQC,UAAU,UAChB,uBAAGA,UAAU,eAAb,oBACA,uBAAGA,UAAU,eAAb,sB,GALakB,cCQfoC,EAAW,CACfC,KAAM,CACJC,MAAO,wGACPC,KAAM,uGAERC,IAAK,CACHF,MAAO,4BACPC,KAAM,6BAIJE,EAAe,CACnB,MACA,YACA,SACA,YACA,gBACA,iBACA,aACA,eACA,OACA,MACA,eACA,eACA,iBACA,iBACA,UAGIC,EAAgB,CACpBvI,OAAQ,CACNwI,SAAS,IAiDEC,E,YA5Cb,WAAY/L,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CACXc,KAAM,CACJ0K,MAAO,KACPC,KAAM,OALO,E,4CAUnBM,UAAA,SAAUC,EAAKL,EAAaC,GAC1B,OAAO1J,IAAQ+J,IAAID,EAAK,CACtBL,cACAC,kBACCM,KAAK,M,EAGVvE,kBAAA,WACE,IAAMwE,EAAUb,EAAqC,gBAA5Bc,GAAYC,YAAgC,MAAQ,QAC7ErL,KAAKiC,SAAS,CACZnC,KAAME,KAAK+K,UAAUI,EAAQX,MAAOG,EAAaC,M,EAIrD7D,OAAA,WAAU,IACAjH,EAASE,KAAKhB,MAAdc,KAER,OACE,6BACE,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,CAAMA,KAAMA,IACZ,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,CAAYA,KAAMA,IAClB,kBAAC,EAAD,Q,GAvCuBoI,aCzCzBoD,EAAM,CACVC,MAAO,oBACPC,YAAa,iIAGTC,E,kGACJ1E,OAAA,WACE,OACE,yBAAKC,UAAU,+BACb,kBAAC,IAAQsE,GACT,kBAAC,EAAD,Q,GALkBpD,aAWXuD,a","file":"component---src-pages-group-unawareness-js-913dd0b15c24525f2944.js","sourcesContent":["import React, { Component } from 'react'\nimport * as tf from '@tensorflow/tfjs'\nimport './Demo.css'\n\nimport gsap from 'gsap'\n\nconst content = {\n  intro: 'You\\'re a machine learning engineer at a commercial bank. One day, your manager gives you a large dataset and asks you to build an algorithm that classifies potential clients into two income types: those who make more than 50K/year, and those who make less. You have access to the attributes on the left. Which of those attributes would you use?',\n  trainButton: 'Train model',\n  logs: {\n    epoch: 'Epoch',\n    accuracy: 'Accuracy',\n    validation: 'Validation'\n  },\n  acceptanceRates: (male, female) => {\n    const maleFormatted = `${(male * 100).toLocaleString('en-US', { maximumFractionDigits: 2 })}%`\n    const femaleFormatted = `${(female * 100).toLocaleString('en-US', { maximumFractionDigits: 2 })}%`\n    return `Your model gave positive predictions (income >50K) for ${maleFormatted} of male applicants and ${femaleFormatted} of female applicants.`\n  },\n  tagLine: 'Do you have a responsibility to leave out sex during the training process? Would doing so make the final predictions more equitable?'\n}\n\nconst attributes = [\n  { id: 'capital-gain', name: 'Capital gain' },\n  { id: 'capital-loss', name: 'Capital loss' },\n  { id: 'age', name: 'Age' },\n  { id: 'sex', name: 'Sex' },\n  { id: 'race', name: 'Race' },\n  { id: 'education', name: 'Education' },\n  { id: 'marital-status', name: 'Marital status' },\n  { id: 'occupation', name: 'Occupation' },\n  { id: 'hours-per-week', name: 'Hours worked per week' }\n]\n\nconst columnsToEncode = [\n  'workclass',\n  'education',\n  'marital-status',\n  'occupation',\n  'relationship',\n  'race',\n  'sex',\n  'native-country'\n]\nconst columnsToRenormalize = [\n  'fnlwgt',\n  'age',\n  'education-num',\n  'capital-gain',\n  'capital-loss',\n  'hours-per-week'\n]\n\nclass Demo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      attributeSelection: attributes.reduce((acc, cur) => Object.assign(acc, { [cur.id]: true }), {}),\n      training: true,\n      trainingLogs: null,\n      oneHotIndices: {},\n      sex: {},\n      done: false,\n      acceptanceRates: {\n        sex: {\n          male: 0,\n          female: 0\n        }\n      }\n    }\n  }\n\n  async preprocessData(data) {\n    const { attributeSelection } = this.state\n    const columnsToUse = Object.keys(attributeSelection).filter(key => attributeSelection[key])\n    let newXs\n    let newYs\n    await data\n      .batch(1000, false)\n      .forEachAsync(el => {\n        const { xs, ys } = el\n        const columns = []\n        const oneHotIndices = {}\n\n        const sexIndices = {}\n        let sexEncoded = null\n\n        for (const key in xs) {\n          if (columnsToUse.includes(key) && columnsToEncode.includes(key)) {\n            const values = xs[key].unique().values\n            const indices = xs[key].unique().indices\n            columns.push(tf.oneHot(indices, values.shape[0]))\n            for (const value of values.arraySync()) {\n              oneHotIndices[`${key}-${value.trim().toLowerCase()}`] = Object.keys(oneHotIndices).length\n            }\n            if (key === 'sex') {\n              sexEncoded = tf.oneHot(indices, values.shape[0])\n              for (const [index, value] of values.arraySync().entries()) {\n                sexIndices[value.trim().toLowerCase()] = index\n              }\n            } \n          } else if (key === 'sex') {\n            const values = xs[key].unique().values\n            const indices = xs[key].unique().indices\n            sexEncoded = tf.oneHot(indices, values.shape[0])\n            for (const [index, value] of values.arraySync().entries()) {\n              sexIndices[value.trim().toLowerCase()] = index\n            }\n          } else if (columnsToUse.includes(key) && columnsToRenormalize.includes(key)) {\n            const colData = xs[key]\n            const range = colData.max().sub(colData.min())\n            columns.push(xs[key].sub(colData.min()).div(range).reshape([-1, 1]))\n            oneHotIndices[key] = Object.keys(oneHotIndices).length\n          }\n        }\n        this.setState({\n          oneHotIndices,\n          sex: {\n            encodedData: sexEncoded,\n            indices: sexIndices\n          }\n        })\n        newXs = tf.concat(columns, 1)\n        newYs = tf.oneHot(ys.income.unique().indices, 2).slice([0, 0], [-1, 1])\n      })\n    return { xs: newXs, ys: newYs }\n  }\n\n  trainModel(input, label) {\n    const model = tf.sequential()\n    model.add(tf.layers.dense({\n      inputShape: [input.shape[1]],\n      units: 1,\n      activation: 'relu',\n      useBias: true\n    }))\n    model.add(tf.layers.dense({\n      units: 1,\n      activation: 'sigmoid',\n      useBias: true\n    }))\n    model.compile({\n      optimizer: tf.train.adam(0.1),\n      loss: 'binaryCrossentropy',\n      metrics: ['accuracy']\n    })\n\n    model.fit(\n      input,\n      label,\n      {\n        epochs: 11,\n        shuffle: true,\n        callbacks: {\n          onEpochEnd: (epoch, logs) => {\n            this.setState({\n              trainingLogs: {\n                epoch,\n                logs\n              }\n            })\n            const percentage = epoch * 10 + Math.round(Math.random() * 4)\n            gsap.to('.gud-progress-number', { \n              innerText: percentage, \n              duration: 0.8, \n              overwrite: true,\n              modifiers: {\n                innerText: i => Math.round(i)\n              }\n            })\n            gsap.to('#gud-progress-line', { \n              strokeDashoffset: 100 - percentage, \n              duration: 0.8, \n              overwrite: true\n            })\n          }\n        }\n      }\n    ).then(async () => {\n      const box = document.querySelector('.gud-box-status')\n      if (box) {\n        box.innerText = 'Done!'\n      }\n      this.modelCallback(model)\n    })\n    return model\n  }\n\n  runModel() {\n    this.setState({\n      training: true\n    }, () => {\n      gsap.to('#gud .gud-intro-wrap', {\n        opacity: 0,\n        duration: 0.6,\n        ease: 'expo.out'\n      })\n      gsap.to('#gud .gud-model-wrap', {\n        y: '-=43em',\n        duration: 1.6,\n        ease: 'expo.inOut',\n        onComplete: async () => {\n          const { data } = this.props\n          const { xs, ys } = await this.preprocessData(data)\n          const xs_train = xs.slice(0, 700)\n          const xs_test = xs.slice(700, -1)\n          const ys_train = ys.slice(0, 700)\n          const ys_test = ys.slice(700, -1)\n          this.setState({\n            data: {\n              xs_test,\n              ys_test\n            }\n          }, () => this.trainModel(xs_train, ys_train))\n        }\n      })\n      gsap.to('#gud .gud-training-wrap', {\n        opacity: 1,\n        duration: 0.6,\n        ease: 'expo.in'\n      })\n    })\n  }\n\n  async modelCallback(model) {\n    const { xs_test } = this.state.data\n    const { sex } = this.state\n    const preds = model.predict(xs_test)\n\n    const maleAcceptance = await preds.greater(0.5).where(sex.encodedData.gather(sex.indices['male'], 1).slice(700, -1).equal(1), tf.zeros([300, 1])).sum().div(300).data()\n    const femaleAcceptance = await preds.greater(0.5).where(sex.encodedData.gather(sex.indices['female'], 1).slice(700, -1).equal(1), tf.zeros([300, 1])).sum().div(300).data()\n\n    const vizCeilPercentage = Math.ceil(Math.max(maleAcceptance, femaleAcceptance) * 10) * 10\n\n    this.setState({\n      training: false,\n      done: true,\n      acceptanceRates: {\n        sex: {\n          male: maleAcceptance,\n          female: femaleAcceptance\n        },\n        viz: {\n          ceilPercentage: vizCeilPercentage,\n          numTicks: vizCeilPercentage / 5 + 1\n        }\n      }\n    }, () => {\n      gsap.fromTo('.gud-result-wrap',\n        { opacity: 0 },\n        { opacity: 1, ease: 'expo.out', duration: 0.8 })\n      gsap.fromTo('.gud-result-viz-bar.men', \n        { width: 0 }, \n        { width: `${maleAcceptance * 100 / vizCeilPercentage * 100}%`, ease: 'expo.out', duration: 0.8 })\n      gsap.fromTo('.gud-result-viz-bar.women', \n        { width: 0 }, \n        { width: `${femaleAcceptance * 100 / vizCeilPercentage * 100}%`, ease: 'expo.out', duration: 0.8 })\n    })\n  }\n\n  toggleAttribute(attribute) {\n    const { attributeSelection } = this.state\n    this.setState({\n      attributeSelection: {\n        ...attributeSelection,\n        [attribute]: !attributeSelection[attribute]\n      }\n    })\n  }\n\n  keyboardSelectorListener(e) {\n    if (e.key === 'Enter') {\n      this.runModel()\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      screenHeight: window.innerHeight\n    })\n  }\n\n  render() {\n    const {\n      attributeSelection,\n      training,\n      trainingLogs,\n      screenHeight,\n      done,\n      acceptanceRates\n    } = this.state\n    return (\n        <div className=\"article-section no-padding row\" id=\"gud\">\n          <div className=\"gu-demo-wrap\">\n            <div className=\"gud-model-wrap\">\n              {attributes.map((attribute, index) => {\n                const lineHeightRatio = 1 - index * 42 / 800\n                if (lineHeightRatio) {\n                  return (\n                    <button\n                      className={`gud-attribute-wrap${attributeSelection[attribute.id] ? ' active' : ''}`}\n                      key={attribute.id}\n                      onClick={() => this.toggleAttribute(attribute.id)}\n                    >\n                      <p className=\"gud-attribute-name\">{attribute.name}</p>\n                      <div className=\"gud-attribute-radio flex-center\">\n                        <svg\n                          width=\"140\"\n                          height=\"700\"\n                          fill=\"none\"\n                          viewBox=\"0 0 140 700\"\n                          className=\"gud-attribute-curve\"\n                          preserveAspectRatio=\"xMinYMin\"\n                          style={{ '--index': index }}\n                        >\n                          <path\n                            stroke=\"#BBBBBB\"\n                            strokeWidth=\"1.2\"\n                            d={`M70 1c27 0 77.5 ${26.2 * lineHeightRatio} 77.5 ${117.7 * lineHeightRatio}C138 ${270.1 * lineHeightRatio} 76.5 ${473.4 * lineHeightRatio} 1 ${700 * lineHeightRatio}`}\n                          />\n                        </svg>\n                        <div className=\"gud-attribute-radio-box\" />\n                        <svg\n                          width=\"20\"\n                          height=\"18\"\n                          fill=\"none\"\n                          viewBox=\"0 0 20 18\"\n                          className=\"gud-attribute-check\"\n                        >\n                          <path\n                            className=\"svg-stroke background\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth=\"3\"\n                            d=\"M1.5 11L8 16.5 18.5 2\"\n                          />\n                        </svg>\n                      </div>\n                    </button>\n                  )\n                }\n                return null\n              })}\n              <div className=\"gud-box-wrap\">\n                <div className=\"gud-box flex-center\">\n                  <p className=\"gud-box-status\">{training && !trainingLogs ? 'Starting…' : 'Training…'}</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"gud-content-wrap\">\n              <div className=\"gud-intro-wrap absolute-center\">\n                <p className=\"gud-explanation\">\n                  {content.intro}\n                </p>\n                <button\n                  className=\"gud-train-button\"\n                  onClick={() => this.runModel()}\n                >\n                  {content.trainButton}\n                </button>\n              </div>\n              <div className=\"gud-training-wrap absolute-center\">\n                {training && !trainingLogs && <p className=\"gud-logs\">Starting…</p>}\n                {training && trainingLogs && trainingLogs.logs && (\n                  <div className=\"gud-training-logs-wrap\">\n                    <p className=\"gud-progress-label\">\n                      Training...\n                    </p>\n                    <div className=\"gud-progress-wrap\">\n                      <svg\n                        width=\"100\"\n                        height=\"4\"\n                        viewBox=\"0 0 100 4\"\n                        className=\"gud-training-progress\"\n                      >\n                        <path \n                          className=\"svg-stroke light\"\n                          strokeWidth=\"2\" \n                          strokeLinecap=\"round\" \n                          d=\"M1 2L99 2\"\n                        />\n                        <path \n                          id=\"gud-progress-line\"\n                          stroke=\"#FFF6E0\" \n                          strokeWidth=\"2\" \n                          strokeLinecap=\"round\" \n                          strokeDasharray=\"100 100\"\n                          strokeDashoffset=\"100\"\n                          d=\"M1 2L99 2\"\n                        />\n                      </svg>\n                      <p className=\"gud-progress-percent-group\">\n                        <span className=\"gud-progress-number\">{0}</span>\n                        <span className=\"gud-progress-percentage\">%</span>\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n              {done && (\n                <div className=\"gud-result-wrap absolute-center\">\n                  <p className=\"gud-result-viz-label\">Positive prediction rate by sex:</p>\n                  <div className=\"gud-result-viz\">\n                    <div className=\"gud-result-viz-ticks-wrap absolute-center\">\n                      {[...Array(acceptanceRates.viz.numTicks)].map((_, index) => {\n                        return (\n                          <div className=\"gud-result-viz-tick\" key={index}>\n                            {index % 2 === 0 && <p className=\"gud-result-viz-tick-label\">{`${index * 5}%`}</p>}\n                          </div>\n                        )\n                      })}\n                    </div>\n                    <div className=\"gud-result-viz-bar-wrap men\">\n                      <p className=\"gud-result-viz-bar-label\">Male</p>\n                      <div className=\"gud-result-viz-bar men\">\n                        <p className=\"gud-result-viz-bar-percentage-label\">{`${Math.round(acceptanceRates.sex.male * 100)}%`}</p>\n                      </div>\n                    </div>\n                    <div className=\"gud-result-viz-bar-wrap women\">\n                      <p className=\"gud-result-viz-bar-label\">Female</p>\n                      <div className=\"gud-result-viz-bar women\">\n                        <p className=\"gud-result-viz-bar-percentage-label\">{`${Math.round(acceptanceRates.sex.female * 100)}%`}</p>\n                      </div>\n                    </div>\n                  </div>\n                  <hr />\n                  <div className=\"gud-result-padding\"></div>\n                  <p className=\"gud-result-message\">\n                    {content.acceptanceRates(acceptanceRates.sex.male, acceptanceRates.sex.female)}\n                  </p>\n                  <p className=\"gud-result-message\">\n                    {content.tagLine}\n                  </p>\n                </div>\n              )}\n            </div>\n            {done && (\n              <div className=\"gud-arrow-wrap\">\n                <svg\n                  width=\"22\"\n                  height=\"37\"\n                  viewBox=\"0 0 22 37\"\n                  className=\"gud-arrow\"\n                >\n                  <g\n                    fill=\"none\"\n                    fillRule=\"evenodd\"\n                    stroke=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeWidth=\"1\"\n                  >\n                    <g className=\"gud-arrow-fill\" strokeWidth=\"2\">\n                      <path d=\"M11 0.979L11 35.238\"/>\n                      <path\n                        strokeLinejoin=\"round\"\n                        d=\"M1.02685596 27.1615195L11 35.2382537 20.9855243 27.1615195\"\n                      />\n                    </g>\n                  </g>\n                </svg>\n              </div>\n            )}\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default Demo\n","import React, { Component } from 'react'\nimport './Hero.css'\n\nimport gsap from 'gsap'\n\nconst illustration = {\n  src: '/images/group-unawareness/illustration.svg',\n  alt: 'Blue eyes with a slash'\n}\n\nclass Hero extends Component {\n  componentDidMount() {\n    document.addEventListener('media-loaded', () => {\n      gsap.fromTo('.article-title-span', \n        { y: '1em' },\n        { y: 0, ease: 'expo.out', duration: 1.6, stagger: 0.12 })\n      gsap.fromTo('.article-hero-illustration', \n        { scale: 0.5, opacity: 0, rotate: -50 },\n        { scale: 1, opacity: 1, rotate: 30, ease: 'expo.out', duration: 1.6 })\n    }, { once: true })\n  }\n\n  render() {\n    return (\n      <div className=\"gu-hero article-hero-wrap row\">\n        <img \n          className=\"article-hero-illustration\" \n          src={illustration.src} \n          alt={illustration.alt} \n        />\n        <h1 className=\"article-title\">\n          <span className=\"article-title-span-wrap\">\n            <span className=\"article-title-span\">GROUP</span>\n          </span>\n          <br />\n          <span className=\"article-title-span-wrap\">\n            <span className=\"article-title-span\">UNAWARENESS</span>\n          </span>\n        </h1>\n      </div>\n    )\n  }\n}\n\nexport default Hero\n","import React, { Component } from 'react'\nimport './Definition.css'\n\nimport gsap from 'gsap'\nimport { ScrollTrigger } from 'gsap/ScrollTrigger'\n\nconst definition = 'An algorithm satisfies group unawareness if it doesn’t have access to protected attributes like race and sex.'\nconst tableColumns = [ 'C. GAIN', 'C. LOSS', 'AGE', 'SEX', 'RACE', 'EDU.', 'MARITAL', 'OCC.' ]\nconst tableSVGs = {\n  head: {\n    src: '/images/group-unawareness/table-head.svg',\n    alt: 'Blue squiggly line'\n  },\n  body: {\n    src: '/images/group-unawareness/table-body.svg',\n    alt: 'Gray squiggly line'\n  }\n}\n\nclass Definition extends Component {\n  toggleColumn(index, to) {\n    gsap.to([`#gud-column-${index} .gud-head`, `#gud-column-${index} .gud-body-svg`],\n      { opacity: to ? 1 : 0, easE: 'expo.out', duration: 0.4 })\n    document.querySelector(`#gud-column-${index}`).style.pointerEvents = to ? 'initial' : 'none'\n  }\n\n  componentDidMount() {\n    ScrollTrigger.create({\n      id: 'gu-definition-column-1',\n      trigger: '.gud-table',\n      start: 'top bottom',\n      end: 'top 70%',\n      onLeave: () => this.toggleColumn(4, false),\n      onEnterBack: () => this.toggleColumn(4, true)\n    })\n    ScrollTrigger.create({\n      id: 'gu-definition-column-2',\n      trigger: '.gud-table',\n      start: 'top 70%',\n      end: 'top 55%',\n      onLeave: () => this.toggleColumn(7, false),\n      onEnterBack: () => this.toggleColumn(7, true)\n    })\n    ScrollTrigger.create({\n      id: 'gu-definition-column-3',\n      trigger: '.gud-table',\n      start: 'top 55%',\n      end: 'top 40%',\n      onLeave: () => this.toggleColumn(3, false),\n      onEnterBack: () => this.toggleColumn(3, true)\n    })\n  }\n\n  componentWillUnmount() {\n    ScrollTrigger.getById('gu-definition-column-1').kill()\n    ScrollTrigger.getById('gu-definition-column-2').kill()\n    ScrollTrigger.getById('gu-definition-column-3').kill()\n  }\n\n  render() {\n    return (\n      <div className=\"gu-definition article-wrap py-4 py-2-sm row\">\n        <div className=\"padding col-2\"></div>\n        <div className=\"col-10\">\n          <p className=\"quote\">{definition}</p>\n          <div className=\"gud-table mt-3\">\n            {[...Array(8)].map((_, index) => {\n              return (\n                <div \n                  id={`gud-column-${index}`}\n                  className=\"gud-column\"\n                  onClick={() => this.toggleColumn(index)}\n                  key={index}\n                >\n                  <div className=\"gud-head-wrap flex-center\">\n                    <p className=\"gud-head fw-bold ff-founders-grotesk fc-dark\">{tableColumns[index]}</p>\n                  </div>\n                  <div className=\"gud-body-wrap\">\n                    {[...Array(5)].map((_, index) => {\n                      return (\n                        <img \n                          key={index}\n                          className=\"gud-body-svg\" \n                          src={tableSVGs.body.src}\n                          alt={tableSVGs.body.alt}\n                        />\n                      )\n                    })}\n                  </div>\n                  <div className=\"gud-column-background spread\"></div>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Definition\n","import React, { Component } from 'react'\nimport './Fairness.css'\n\nimport gsap from 'gsap'\nimport { ScrollTrigger } from 'gsap/ScrollTrigger'\n\nconst fairnessQuote = 'Group-unaware algorithms are more procedurally fair.'\nconst fairnessContent = [\n  'We can split fairness into two categories: procedural fairness and outcome fairness. An action or event A is procedurally fair if the process involved in it is fair. For example, an impartial jury is a necessary (but not sufficient) condition for a procedurally fair trial. On the other hand, we judge outcome fairness based on the consequences that arise from A, not A itself. For example, an equitable housing approval process that takes affirmative steps to accommodate low-income families satisfies outcome fairness, because the resulting housing distribution is more equitable.',\n  'It is easy to see how group-unaware algorithms are more procedurally fair. Since the decision-makers and the algorithm itself don\\'t know about the race or sex of the applicants, they cannot actively discriminate against any specific demographic group. This makes them impartial (at least when it comes to the protected attributes that were left out), which is an important criterion for procedural fairness.'\n]\nconst star = {\n  src: '/images/group-unawareness/star.svg',\n  alt: 'Blue asterisk'\n}\n\nclass Fairness extends Component {\n  componentDidMount() {\n    ScrollTrigger.create({\n      id: 'gu-fairness-asterisk',\n      trigger: '.gu-fairness.article-wrap',\n      start: 'top bottom',\n      end: 'bottom top',\n      animation: gsap.to('.guf-star', { rotate: 120, duration: 1 }),\n      scrub: 0.5\n    })\n  }\n\n  componentWillUnmount() {\n    ScrollTrigger.getById('gu-fairness-asterisk').kill()\n  }\n\n  render() {\n    return (\n      <div className=\"gu-fairness article-wrap py-4 py-2-sm row\">\n        <div className=\"col-8\">\n          <p className=\"quote\">{fairnessQuote}</p>\n          <div className=\"guf-text-wrap mt-2\">\n            <p className=\"guf-text\">{fairnessContent[0]}</p>\n            <p className=\"guf-text\">{fairnessContent[1]}</p>\n          </div>\n        </div>\n        <div className=\"padding col-4 flex-center\">\n          <img \n            className=\"guf-star\"\n            src={star.src} \n            alt={star.alt} \n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Fairness\n","import React, { Component } from 'react'\nimport * as tf from '@tensorflow/tfjs'\nimport './Sandbox.css'\n\nimport gsap from 'gsap'\n\nconst content = {\n  trainButton: 'Train model',\n  logs: {\n    epoch: 'Epoch',\n    accuracy: 'Accuracy',\n    validation: 'Validation'\n  },\n  acceptanceRates: (male, female) => {\n    const maleFormatted = `${(male * 100).toLocaleString('en-US', { maximumFractionDigits: 2 })}%`\n    const femaleFormatted = `${(female * 100).toLocaleString('en-US', { maximumFractionDigits: 2 })}%`\n    return `Your model gave positive predictions (income >50K) for ${maleFormatted} of male applicants and ${femaleFormatted} of female applicants.`\n  }\n}\n\nconst attributes = [\n  { id: 'capital-gain', name: 'Capital gain' },\n  { id: 'capital-loss', name: 'Capital loss' },\n  { id: 'age', name: 'Age' },\n  { id: 'sex', name: 'Sex' },\n  { id: 'race', name: 'Race' },\n  { id: 'education', name: 'Education' },\n  { id: 'marital-status', name: 'Marital status' },\n  { id: 'occupation', name: 'Occupation' },\n  { id: 'hours-per-week', name: 'Hours worked per week' }\n]\n\nconst columnsToEncode = [\n  'workclass',\n  'education',\n  'marital-status',\n  'occupation',\n  'relationship',\n  'race',\n  'sex',\n  'native-country'\n]\nconst columnsToRenormalize = [\n  'fnlwgt',\n  'age',\n  'education-num',\n  'capital-gain',\n  'capital-loss',\n  'hours-per-week'\n]\n\nclass Sandbox extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      attributeSelection: attributes.reduce((acc, cur) => Object.assign(acc, { [cur.id]: true }), {}),\n      training: false,\n      trainingLogs: null,\n      oneHotIndices: {},\n      sex: {},\n      done: false,\n      acceptanceRates: {\n        sex: {\n          male: 0,\n          female: 0\n        }\n      }\n    }\n  }\n\n  async preprocessData(data) {\n    const { attributeSelection } = this.state\n    const columnsToUse = Object.keys(attributeSelection).filter(key => attributeSelection[key])\n    let newXs\n    let newYs\n    await data\n      .batch(1000, false)\n      .forEachAsync(el => {\n        const { xs, ys } = el\n        const columns = []\n        const oneHotIndices = {}\n\n        const sexIndices = {}\n        let sexEncoded = null\n\n        for (const key in xs) {\n          if (columnsToUse.includes(key) && columnsToEncode.includes(key)) {\n            const values = xs[key].unique().values\n            const indices = xs[key].unique().indices\n            columns.push(tf.oneHot(indices, values.shape[0]))\n            for (const value of values.arraySync()) {\n              oneHotIndices[`${key}-${value.trim().toLowerCase()}`] = Object.keys(oneHotIndices).length\n            }\n            if (key === 'sex') {\n              sexEncoded = tf.oneHot(indices, values.shape[0])\n              for (const [index, value] of values.arraySync().entries()) {\n                sexIndices[value.trim().toLowerCase()] = index\n              }\n            } \n          } else if (key === 'sex') {\n            const values = xs[key].unique().values\n            const indices = xs[key].unique().indices\n            sexEncoded = tf.oneHot(indices, values.shape[0])\n            for (const [index, value] of values.arraySync().entries()) {\n              sexIndices[value.trim().toLowerCase()] = index\n            }\n          } else if (columnsToUse.includes(key) && columnsToRenormalize.includes(key)) {\n            const colData = xs[key]\n            const range = colData.max().sub(colData.min())\n            columns.push(xs[key].sub(colData.min()).div(range).reshape([-1, 1]))\n            oneHotIndices[key] = Object.keys(oneHotIndices).length\n          }\n        }\n        this.setState({\n          oneHotIndices,\n          sex: {\n            encodedData: sexEncoded,\n            indices: sexIndices\n          }\n        })\n        newXs = tf.concat(columns, 1)\n        newYs = tf.oneHot(ys.income.unique().indices, 2).slice([0, 0], [-1, 1])\n      })\n    return { xs: newXs, ys: newYs }\n  }\n\n  trainModel(input, label) {\n    const model = tf.sequential()\n    model.add(tf.layers.dense({\n      inputShape: [input.shape[1]],\n      units: 1,\n      activation: 'relu',\n      useBias: true\n    }))\n    model.add(tf.layers.dense({\n      units: 1,\n      activation: 'sigmoid',\n      useBias: true\n    }))\n    model.compile({\n      optimizer: tf.train.adam(0.1),\n      loss: 'binaryCrossentropy',\n      metrics: ['accuracy']\n    })\n\n    model.fit(\n      input,\n      label,\n      {\n        epochs: 11,\n        shuffle: true,\n        callbacks: {\n          onEpochEnd: (epoch, logs) => {\n            this.setState({\n              trainingLogs: {\n                epoch,\n                logs\n              }\n            })\n            const percentage = epoch * 10 + Math.round(Math.random() * 4)\n            gsap.to('.gud-progress-number', { \n              innerText: percentage, \n              duration: 0.8, \n              overwrite: true,\n              modifiers: {\n                innerText: i => Math.round(i)\n              }\n            })\n            gsap.to('#gud-progress-line', { \n              strokeDashoffset: 100 - percentage, \n              duration: 0.8, \n              overwrite: true\n            })\n          }\n        }\n      }\n    ).then(async () => {\n      const box = document.querySelector('.gud-box-status')\n      if (box) {\n        box.innerText = 'Done!'\n      }\n      this.modelCallback(model)\n    })\n    return model\n  }\n\n  runModel() {\n    this.setState({\n      training: true\n    }, () => {\n      gsap.to('#gur-sandbox .gud-intro-wrap', {\n        opacity: 0,\n        duration: 0.6,\n        ease: 'expo.out'\n      })\n      gsap.to('#gur-sandbox .gud-model-wrap', {\n        y: '-=42.6em',\n        duration: 1.6,\n        ease: 'expo.inOut',\n        onComplete: async () => {\n          const { data } = this.props\n          const { xs, ys } = await this.preprocessData(data)\n          const xs_train = xs.slice(0, 700)\n          const xs_test = xs.slice(700, -1)\n          const ys_train = ys.slice(0, 700)\n          const ys_test = ys.slice(700, -1)\n          this.setState({\n            data: {\n              xs_test,\n              ys_test\n            }\n          }, () => this.trainModel(xs_train, ys_train))\n        }\n      })\n      gsap.to('#gur-sandbox .gud-training-wrap', {\n        opacity: 1,\n        duration: 0.6,\n        ease: 'expo.in'\n      })\n    })\n  }\n\n  async modelCallback(model) {\n    const { xs_test } = this.state.data\n    const { sex } = this.state\n    const preds = model.predict(xs_test)\n\n    const maleAcceptance = await preds.greater(0.5).where(sex.encodedData.gather(sex.indices['male'], 1).slice(700, -1).equal(1), tf.zeros([300, 1])).sum().div(300).data()\n    const femaleAcceptance = await preds.greater(0.5).where(sex.encodedData.gather(sex.indices['female'], 1).slice(700, -1).equal(1), tf.zeros([300, 1])).sum().div(300).data()\n\n    const vizCeilPercentage = Math.ceil(Math.max(maleAcceptance, femaleAcceptance) * 10) * 10\n\n    this.setState({\n      training: false,\n      done: true,\n      acceptanceRates: {\n        sex: {\n          male: maleAcceptance,\n          female: femaleAcceptance\n        },\n        viz: {\n          ceilPercentage: vizCeilPercentage,\n          numTicks: vizCeilPercentage / 5 + 1\n        }\n      }\n    }, () => {\n      gsap.fromTo('.gud-result-wrap',\n        { opacity: 0 },\n        { opacity: 1, ease: 'expo.out', duration: 0.8 })\n      gsap.fromTo('.gud-result-viz-bar.men', \n        { width: 0 }, \n        { width: `${maleAcceptance * 100 / vizCeilPercentage * 100}%`, ease: 'expo.out', duration: 0.8 })\n      gsap.fromTo('.gud-result-viz-bar.women', \n        { width: 0 }, \n        { width: `${femaleAcceptance * 100 / vizCeilPercentage * 100}%`, ease: 'expo.out', duration: 0.8 })\n    })\n  }\n\n  toggleAttribute(attribute) {\n    const { attributeSelection } = this.state\n    this.setState({\n      attributeSelection: {\n        ...attributeSelection,\n        [attribute]: !attributeSelection[attribute]\n      }\n    })\n  }\n\n  keyboardSelectorListener(e) {\n    if (e.key === 'Enter') {\n      this.runModel()\n    }\n  }\n\n  retry() {\n    this.setState({\n      training: false,\n      trainingLogs: null,\n      oneHotIndices: {},\n      sex: {},\n      done: false,\n      acceptanceRates: {\n        sex: {\n          male: 0,\n          female: 0\n        }\n      }\n    }, () => {\n      gsap.to('#gur-sandbox .gud-intro-wrap', {\n        opacity: 1,\n        duration: 1.6,\n        ease: 'expo.inOut'\n      })\n      gsap.to('#gur-sandbox .gud-model-wrap', {\n        y: '+=42.6em',\n        duration: 1.6,\n        ease: 'expo.inOut'\n      })\n      gsap.to('#gur-sandbox .gud-training-wrap', {\n        opacity: 0,\n        duration: 0.6,\n        ease: 'expo.out'\n      })\n    })\n  }\n\n  componentDidMount() {\n    this.setState({\n      screenHeight: window.innerHeight\n    })\n  }\n\n  render() {\n    const {\n      attributeSelection,\n      training,\n      trainingLogs,\n      screenHeight,\n      done,\n      acceptanceRates\n    } = this.state\n    return (\n        <div className=\"article-section no-padding row\" id=\"gur-sandbox\">\n          <div className=\"gu-demo-wrap\">\n            <div className=\"gud-model-wrap\">\n              {attributes.map((attribute, index) => {\n                const lineHeightRatio = 1 - index * 42 / 800\n                if (lineHeightRatio) {\n                  return (\n                    <button\n                      className={`gud-attribute-wrap${attributeSelection[attribute.id] ? ' active' : ''}`}\n                      key={attribute.id}\n                      onClick={() => this.toggleAttribute(attribute.id)}\n                    >\n                      <p className=\"gud-attribute-name\">{attribute.name}</p>\n                      <div className=\"gud-attribute-radio flex-center\">\n                        <svg\n                          width=\"140\"\n                          height=\"700\"\n                          fill=\"none\"\n                          viewBox=\"0 0 140 700\"\n                          className=\"gud-attribute-curve\"\n                          preserveAspectRatio=\"xMinYMin\"\n                          style={{ '--index': index }}\n                        >\n                          <path\n                            stroke=\"#BBBBBB\"\n                            strokeWidth=\"1.2\"\n                            d={`M70 1c27 0 77.5 ${26.2 * lineHeightRatio} 77.5 ${117.7 * lineHeightRatio}C138 ${270.1 * lineHeightRatio} 76.5 ${473.4 * lineHeightRatio} 1 ${700 * lineHeightRatio}`}\n                          />\n                        </svg>\n                        <div className=\"gud-attribute-radio-box\" />\n                        <svg\n                          width=\"20\"\n                          height=\"18\"\n                          fill=\"none\"\n                          viewBox=\"0 0 20 18\"\n                          className=\"gud-attribute-check\"\n                        >\n                          <path\n                            className=\"svg-stroke background\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth=\"3\"\n                            d=\"M1.5 11L8 16.5 18.5 2\"\n                          />\n                        </svg>\n                      </div>\n                    </button>\n                  )\n                }\n                return null\n              })}\n              <div className=\"gud-box-wrap\">\n                <div className=\"gud-box flex-center\">\n                  <p className=\"gud-box-status\">{training && !trainingLogs ? 'Starting…' : 'Training…'}</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"gud-content-wrap\">\n              <div className=\"gud-intro-wrap absolute-center\">\n                <button\n                  className=\"gud-train-button\"\n                  onClick={() => this.runModel()}\n                >\n                  {content.trainButton}\n                </button>\n              </div>\n              <div className=\"gud-training-wrap absolute-center\">\n                {training && !trainingLogs && <p className=\"gud-logs\">Starting…</p>}\n                {training && trainingLogs && trainingLogs.logs && (\n                  <div className=\"gud-training-logs-wrap\">\n                    <p className=\"gud-progress-label\">\n                      Training...\n                    </p>\n                    <div className=\"gud-progress-wrap\">\n                      <svg\n                        width=\"100\"\n                        height=\"4\"\n                        viewBox=\"0 0 100 4\"\n                        className=\"gud-training-progress\"\n                      >\n                        <path \n                          className=\"svg-stroke light\"\n                          strokeWidth=\"2\" \n                          strokeLinecap=\"round\" \n                          d=\"M1 2L99 2\"\n                        />\n                        <path \n                          id=\"gud-progress-line\"\n                          stroke=\"#FFF6E0\" \n                          strokeWidth=\"2\" \n                          strokeLinecap=\"round\" \n                          strokeDasharray=\"100 100\"\n                          strokeDashoffset=\"100\"\n                          d=\"M1 2L99 2\"\n                        />\n                      </svg>\n                      <p className=\"gud-progress-percent-group\">\n                        <span className=\"gud-progress-number\">{0}</span>\n                        <span className=\"gud-progress-percentage\">%</span>\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n              {done && (\n                <div className=\"gud-result-wrap absolute-center\">\n                  <p className=\"gud-result-viz-label\">Positive prediction rate by sex:</p>\n                  <div className=\"gud-result-viz\">\n                    <div className=\"gud-result-viz-ticks-wrap absolute-center\">\n                      {[...Array(acceptanceRates.viz.numTicks)].map((_, index) => {\n                        return (\n                          <div className=\"gud-result-viz-tick\" key={index}>\n                            {index % 2 === 0 && <p className=\"gud-result-viz-tick-label\">{`${index * 5}%`}</p>}\n                          </div>\n                        )\n                      })}\n                    </div>\n                    <div className=\"gud-result-viz-bar-wrap men\">\n                      <p className=\"gud-result-viz-bar-label\">Male</p>\n                      <div className=\"gud-result-viz-bar men\">\n                        <p className=\"gud-result-viz-bar-percentage-label\">{`${Math.round(acceptanceRates.sex.male * 100)}%`}</p>\n                      </div>\n                    </div>\n                    <div className=\"gud-result-viz-bar-wrap women\">\n                      <p className=\"gud-result-viz-bar-label\">Female</p>\n                      <div className=\"gud-result-viz-bar women\">\n                        <p className=\"gud-result-viz-bar-percentage-label\">{`${Math.round(acceptanceRates.sex.female * 100)}%`}</p>\n                      </div>\n                    </div>\n                  </div>\n                  <hr />\n                  <div className=\"gud-result-padding\"></div>\n                  <p className=\"gud-result-message\">\n                    {content.acceptanceRates(acceptanceRates.sex.male, acceptanceRates.sex.female)}\n                  </p>\n                  <button \n                    className=\"gud-result-retry\" \n                    onClick={() => this.retry()}\n                  >\n                    Try again\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default Sandbox\n","import React, { Component } from 'react'\nimport './Redundancy.css'\n\nimport Sandbox from './sandbox/Sandbox';\n\nconst redundancyQuote = 'But what effect does it have on outcome equity?'\nconst redundancyContent = [\n  'As it turns out, not much. Intuitively, we expect that if the algorithm doesn\\'t have access to information on protected groups, then it cannot discriminate with regard to those groups. This turns out not to be the case. Try it with the sandbox below. First, train the model with all the available variables. Record the acceptance rates for men vs women. Then, restart, deselect Sex, and train the model again. Compare the acceptance rates now and the recorded rates from before. You should see that there is barely any change.',\n  'So, what\\'s up? Our expectation was that as long as the algorithm doesn\\'t have access to information on protected groups, then it cannot discriminate based on those groups. In drawing the conclusion, however, we assumed that the sensitive information has been completely removed. The fact is group unawareness doesn\\'t do a very good job at this.',\n  'Even after removing all of the sensitive variables (e.g. race, sex), information on protected groups still exist in the remaining variables. Take the example of sex. Men have historically had higher income than women. So, information on an applicant\\'s sex is partially embedded in their income. Now, there is not a definite relationship between income and sex - many women have higher income than the male average. Still, given this and many other correlational relationships (e.g. men have historically had a higher level of education than women, due to unequal access), we can indeed build a pretty good model to predict an applican\\'t sex based on their income, education, occupation, etc.'\n]\nconst star = {\n  src: '/images/group-unawareness/star.svg',\n  alt: 'Blue asterisk'\n}\n\nclass Redundancy extends Component {\n  render() {\n    const { data } = this.props\n\n    return (\n      <div className=\"gu-fairness article-wrap py-4 py-2-sm row\">\n        <div className=\"padding col-2\"></div>\n        <div className=\"col-8\">\n          <p className=\"quote\">{redundancyQuote}</p>\n          <div className=\"guf-text-wrap mt-2 mb-2\">\n            <p className=\"guf-text\">{redundancyContent[0]}</p>\n          </div>\n          <hr />\n          <Sandbox data={data} />\n          <hr />\n          <div className=\"guf-text-wrap mt-2\">\n            <p className=\"guf-text\">{redundancyContent[0]}</p>\n          </div>\n        </div>\n        <div className=\"padding col-2\"></div>\n      </div>\n    )\n  }\n}\n\nexport default Redundancy\n","import React, { Component } from 'react'\nimport './Footer.css'\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <p className=\"footer-text\">(Un)Fair Machine</p>\n        <p className=\"footer-text\">Made by Vu Luong</p>\n      </footer>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport * as tf from '@tensorflow/tfjs'\nimport './GroupUnawareness.css'\n\nimport Demo from './demo/Demo'\nimport Hero from './hero/Hero'\nimport Definition from './definition/Definition'\nimport Fairness from './fairness/Fairness'\nimport Redundancy from './redundancy/Redundancy'\nimport Footer from '../../layouts/footer/Footer'\n\nconst datasets = {\n  prod: {\n    train: 'https://res.cloudinary.com/vuluongj20/raw/upload/v1605146921/unfair-machine/datasets/adult-train2.csv',\n    test: 'https://res.cloudinary.com/vuluongj20/raw/upload/v1605146919/unfair-machine/datasets/adult-test.csv'\n  },\n  dev: {\n    train: '/datasets/adult-train.csv',\n    test: '/datasets/adult-test.csv'\n  }\n}\n\nconst columnNames =  [\n  'age',\n  'workclass',\n  'fnlwgt',\n  'education',\n  'education-num',\n  'marital-status',\n  'occupation',\n  'relationship',\n  'race',\n  'sex',\n  'capital-gain',\n  'capital-loss',\n  'hours-per-week',\n  'native-country',\n  'income'\n]\n\nconst columnConfigs = {\n  income: {\n    isLabel: true\n  }\n}\n\nclass GroupUnawareness extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: {\n        train: null,\n        test: null\n      }\n    }\n  }\n\n  fetchData(url, columnNames, columnConfigs) {\n    return tf.data.csv(url, {\n      columnNames,\n      columnConfigs\n    }).take(1000)\n  }\n\n  componentDidMount() {\n    const dataURL = datasets[process.env.environment === 'development' ? 'dev' : 'prod']\n    this.setState({\n      data: this.fetchData(dataURL.train, columnNames, columnConfigs)\n    })\n  }\n\n  render() {\n    const { data } = this.state\n\n    return (\n      <div>\n        <Hero />\n        <hr />\n        <Demo data={data} />\n        <hr />\n        <Definition />\n        <hr />\n        <Fairness />\n        <hr />\n        <Redundancy data={data} />\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default GroupUnawareness\n","import React, { Component } from 'react'\n\nimport SEO from '../components/seo'\nimport GroupUnawareness from '../components/group-unawareness/GroupUnawareness'\n\nconst seo = {\n  title: 'Group Unawareness',\n  description: 'Group unawareness means that the algorithm does not have access to sensitive attributes like gender, race when it is trained.'\n}\n\nclass Unawareness extends Component {\n  render() {\n    return (\n      <div className=\"group-unawareness-page-wrap\">\n        <SEO {...seo} />\n        <GroupUnawareness />\n      </div>\n    )\n  }\n}\n\nexport default Unawareness\n"],"sourceRoot":""}